#ifdef _WIN32	//	win32版
	#include <stdio.h>
	#define for if(0); else for
#else			//	SH4版
	#include <cyg/kernel/kapi.h>
	#include <cyg/hal/sh_stub.h>
	#include "iodefine.h"
	#include <stdio.h>
	#include <math.h>

	#ifdef __cplusplus
		extern "C" {
	#endif
	extern void HardwareSetup(void);
//	extern int printf(const char * format, ...);
	#ifdef __cplusplus
		}
	#endif
#endif


void dumpD(double d){
	unsigned ar[2];
	*(double*)ar = d;
	unsigned di = (unsigned)d;
	unsigned df = (unsigned)((d-di) * 10000.0);
	unsigned i0, i1;
#ifdef _WIN32
	i0 = ar[1];
	i1 = ar[0];
#else
	i0 = ar[0];
	i1 = ar[1];
#endif
	unsigned s = i0 >> 31;
	unsigned e = (i0 >> 20) & 0x7ff;
	unsigned n0 = i0 & 0xfffff;
	unsigned n1 = i1;
	printf("%c %3x %5x%8x   %8x %8x (%d.%04d)\n\r", s?'-':'+', e, n0, n1, i0, i1, di, df);
}

void dumpF(float d){
	unsigned i0;
	*(float*)&i0 = d;
	unsigned di = (unsigned)d;
	unsigned df = (unsigned)((d-di) * 10000.0f);
	unsigned s = i0 >> 31;
	unsigned e = (i0 >> 23) & 0xff;
	unsigned n0 = i0 & 0x3fffff;
	printf("%c %02x %06x   %08x (%d.%04d)\n\r", s?'-':'+', e, n0, i0, di, df);
}

//#include <iostream>

int main(void){
	float f60 = (float)((60.0f/360.0f)*2*3.141592653589f);
	printf("sin60 = %f\n\r", sinf( f60 ));
	printf("sin60 = %f\n", sin( f60 ));
//	std::cout << "10.0f + 20.0f = " << 10.0f+20.0f << std::endl;
//	std::cout.flush();
	
	
#ifndef _WIN32
	HardwareSetup();
//	put_register(VBR,	0x08008000);
//	put_register(FPSCR,	0x000C0001);
#endif

#if 0
	float d = 1.0f;
	printf("\n\r------------------------------------------\n\r");
	for(int i=0; i<4; ++i){
		dumpF(d);
		d *= 2.0f;
	}
	printf("------------------------------------------\n\r");
	d = 0.0;
	for(int i=0; i<10; ++i){
		dumpF(d);
		d += 1.0f;
	}

	//	テスト用おまけ(Intel上でSHのバグ再現)
#ifdef _WIN32
	printf("------------------------------------------\n\r");
	//	FPUは float コンパイラは double モードで動作していると．
	int missI = 0x3ff00000;	//	double の1の上位
	float miss = *(float*)&missI;
	float missOne = miss;
	for(int i=0; i<4; ++i){
		dumpF(miss);
		miss += missOne;
	}
#endif

#else
	double d = 1.0;
	printf("------------------------------------------\n");
	for(int i=0; i<4; ++i){
		dumpD(d);
		d *= 2.0;
	}
	printf("------------------------------------------\n\r");
	d = 0.0;
	for(int i=0; i<10; ++i){
		dumpD(d);
		d += 1.0;
	}
#endif
	
	printf("%f %e \n\r", 12.3456, 1234567890.0);
	
	return 0;
}


/*	実行結果
intel double版
------------------------------------------
+ 3ff     0       0   3ff00000        0 (1.0000)
+ 400     0       0   40000000        0 (2.0000)
+ 401     0       0   40100000        0 (4.0000)
+ 402     0       0   40200000        0 (8.0000)
------------------------------------------
+   0     0       0          0        0 (0.0000)
+ 3ff     0       0   3ff00000        0 (1.0000)
+ 400     0       0   40000000        0 (2.0000)
+ 400 80000       0   40080000        0 (3.0000)
+ 401     0       0   40100000        0 (4.0000)
+ 401 40000       0   40140000        0 (5.0000)
+ 401 80000       0   40180000        0 (6.0000)
+ 401 c0000       0   401c0000        0 (7.0000)
+ 402     0       0   40200000        0 (8.0000)
+ 402 20000       0   40220000        0 (9.0000)
------------------------------------------
+ 7f 300000   3ff00000 (1.8750)
+ 80 300000   40700000 (3.7500)
+ 81 340000   40b40000 (5.6250)
+ 81 300000   40f00000 (7.5000)

SH m4-single double 版
------------------------------------------
+    3ff      0        0           3ff00000         0 (1.00000)
+    400      0        0           40000000         0 (2.00000)
+    401      0        0           40100000         0 (2.00000)
+    402      0        0           40200000         0 (2.00000)
------------------------------------------
+    0      0        0           0         0 (0.00000)
+    3ff      0        0           3ff00000         0 (1.00005)
+    407      0        0           40700000         0 (3.00004)
+    40b      40000        0           40b40000         0 (5.00003)
+    40f      0        0           40f00000         0 (7.00003)
+    411      60000        0           41160000         0 (9.00002)
+    413      40000        0           41340000         0 (11.00001)
+    415      20000        0           41520000         0 (13.00000)
+    417      0        0           41700000         0 (15.00000)
+    418      70000        0           41870000         0 (16.00005)



intel float 版
------------------------------------------
+ 7f 000000   3f800000 (1.0000)
+ 80 000000   40000000 (2.0000)
+ 81 000000   40800000 (4.0000)
+ 82 000000   41000000 (8.0000)
------------------------------------------
+ 00 000000   00000000 (0.0000)
+ 7f 000000   3f800000 (1.0000)
+ 80 000000   40000000 (2.0000)
+ 80 000000   40400000 (3.0000)
+ 81 000000   40800000 (4.0000)
+ 81 200000   40a00000 (5.0000)
+ 81 000000   40c00000 (6.0000)
+ 81 200000   40e00000 (7.0000)
+ 82 000000   41000000 (8.0000)
+ 82 100000   41100000 (9.0000)

SH m4-single float 版
------------------------------------------
+ 7f 0   3f800000 (-2147483648.0)
+ 80 0   40000000 (0.-2147483648)
+ 81 0   40800000 (0.-2147483648)
+ 82 0   41000000 (0.-2147483648)
------------------------------------------
+ 0 0   0 (0.0)
+ 7f 0   3f800000 (-161061280.-001)
+ 80 00000   00000040000000 (-2147483648.0)
+ 80 0   40400000 (-2147483648.0)
+ 81 0   40800000 (-2147483648.0)
+ 81 200000   40a00000 (-2147483648.0)
+ 81 0   40c00000 (-2147483648.0)
+ 81 200000   40e00000 (-2147483648.0)
+ 82 0   41000000 (-2147483648.0)
+ 82 100000   41100000 (-2147483648.0)
*/

/*
extern "C" void write(void* p, size_t sz){
}
*/
